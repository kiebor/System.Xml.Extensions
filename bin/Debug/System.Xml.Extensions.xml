<?xml version="1.0"?>
<doc>
<assembly>
<name>
System.Xml.Extensions
</name>
</assembly>
<members>
<member name="T:System.Xml.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:System.Xml.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:System.Xml.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:System.Xml.XmlExtensions">
 <summary>
 
 </summary>
</member>
<member name="M:System.Xml.XmlExtensions.WithValue(System.Xml.Linq.XElement,System.Object)">
 <summary>
 Returns a new XElement or modifies existing, populated with the specified value.
 </summary>
 <param name="element">The element.</param>
 <param name="value">The value.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.From(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
 <summary>
 Returns a new XElement or modifies existing, populated with the injected XElements.
 </summary>
 <param name="element">The element.</param>
 <param name="insertables">The insertables.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.AddRange(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
 <summary>
 Adds the specified range.
 </summary>
 <param name="element">The element.</param>
 <param name="insertables">The insertables.</param>
</member>
<member name="M:System.Xml.XmlExtensions.With(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
 <summary>
Returns a new XElement or modifies existing, injected with the specified child element.
 </summary>
 <param name="element">The element.</param>
 <param name="insertable">The insertable.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.AsXDocument(System.String)">
 <summary>
 Converts a valid xml string structure to XDocument
 </summary>
 <param name="xmlstring">The xmlstring.</param>
 <returns></returns>
 <exception cref="T:System.Xml.XmlException"></exception>
</member>
<member name="M:System.Xml.XmlExtensions.ToXDocument(System.Xml.Linq.XElement)">
 <summary>
 Converts Xelement structure to XDocument
 </summary>
 <param name="xml">The XML.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToXElement(System.String,System.Object)">
 <summary>
 Converts a string to XElement with value
 </summary>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.WithDeclaration(System.Xml.Linq.XDocument,System.Xml.Linq.XDeclaration)">
 <summary>
 Returns a new XDocument or modifies existing, readied with the specified XDeclaration.
 </summary>
 <param name="document">The document.</param>
 <param name="declaration">The declaration.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.From(System.Xml.Linq.XDocument,System.Xml.Linq.XElement)">
 <summary>
 Returns a new XDocument or modifies existing, populated from the specified XElement as root.
 </summary>
 <param name="document">The document.</param>
 <param name="element">The element.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.Insert(System.Xml.Linq.XDocument,System.Xml.Linq.XElement)">
 <summary>
 Inserts specified XElement into the defined XDocument.
 </summary>
 <param name="document">The document.</param>
 <param name="element">The element.</param>
</member>
<member name="M:System.Xml.XmlExtensions.Insert(System.Xml.Linq.XDocument,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
 <summary>
 Inserts specified XElement array into the defined XDocument.
 </summary>
 <param name="document">The document.</param>
 <param name="element">The element.</param>
 <exception cref="T:System.Xml.XmlParseException">
 Can not insert multiple elements @root. This would produce an invalid xml structure.
 or
 Error @root; potentially invalid structure. See inner exception for detail.
 </exception>
</member>
<member name="M:System.Xml.XmlExtensions.WithRoot(System.Xml.Linq.XDocument,System.String)">
 <summary>
 Returns a new XDocument or modifies existing, injected with the specified root element.
 </summary>
 <param name="document">The document.</param>
 <param name="root">The root.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.WithRoot(System.Xml.Linq.XDocument,System.Xml.Linq.XElement)">
 <summary>
 Returns a new XDocument or modifies existing, injected with the specified root element.
 </summary>
 <param name="document">The document.</param>
 <param name="root">The root.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToXString``1(``0)">
 <summary>
 Serialize T (from Type) to XString object
 </summary>
 <typeparam name="T"></typeparam>
 <param name="value">The value.</param>
 <returns></returns>
 <exception cref="T:System.Xml.XmlParseException">An error occurred; see inner exception for details.</exception>
</member>
<member name="M:System.Xml.XmlExtensions.ToXString(System.Xml.Linq.XDocument)">
 <summary>
 Converts XDocument to XString
 </summary>
 <param name="doc">The document.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToXString(System.Xml.Linq.XElement)">
 <summary>
 Converts XElement to XString
 </summary>
 <param name="element">The element.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.FromJson(System.Xml.Linq.XDocument,System.String)">
 <summary>
 Returns a new XDocument from Json input; invalid or badly formatted json will throw XmlParseException
 </summary>
 <param name="doc">The document.</param>
 <param name="jsonstring">The jsonstring.</param>
 <returns></returns>
 <exception cref="T:System.Xml.XmlParseException"></exception>
</member>
<member name="M:System.Xml.XmlExtensions.ToJson(System.String)">
 <summary>
 Converts an Xml structured string to Json formatted string
 </summary>
 <param name="xmlString">The XML string.</param>
 <returns></returns>
 <exception cref="T:System.Xml.XmlParseException">Could not parse xml input; see inner exception for details.</exception>
</member>
<member name="M:System.Xml.XmlExtensions.ToJson(System.Xml.Linq.XElement)">
 <summary>
 Converts XElement to Json formatted string
 </summary>
 <param name="element">The element.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToJson(System.Xml.Linq.XDocument)">
 <summary>
 Converts XDocument to Json formatted string
 </summary>
 <param name="document">The element.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToRawData(System.Xml.Linq.XElement)">
 <summary>
 Converts XElement to raw data Dictionary
 </summary>
 <param name="xml">The XML.</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.WriteTo(System.Xml.Linq.XDocument,System.Boolean,System.Boolean)">
 <summary>
 Writes the XDocument to StringBuilder; must be converted to usable type after return.
 </summary>
 <param name="document">The document.</param>
 <param name="omitDeclaration">if set to <c>true</c> [omit declaration].</param>
 <param name="preserveIndentation">if set to <c>true</c> [preserve indentation].</param>
 <returns></returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToString(System.Xml.Linq.XDocument,System.Boolean,System.Boolean)">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance; wraps an XmlWriter return.
 </summary>
 <param name="document">The document.</param>
 <param name="omitDeclaration">if set to <c>true</c> [omit declaration].</param>
 <param name="preserveIndentation">if set to <c>true</c> [preserve indentation].</param>
 <returns>
 A <see cref="T:System.String" /> that represents this instance.
 </returns>
</member>
<member name="M:System.Xml.XmlExtensions.ToBytes(System.Xml.Linq.XDocument,System.Boolean,System.Boolean)">
 <summary>
 Returns a <see cref="T:System.Byte" /> array that represents this instance; wraps an XmlWriter return.
 </summary>
 <param name="document">The document.</param>
 <param name="omitDeclaration">if set to <c>true</c> [omit declaration].</param>
 <param name="preserveIndentation">if set to <c>true</c> [preserve indentation].</param>
 <returns></returns>
</member>
<member name="T:System.Xml.XString">
 <summary>
 XString is a contianer object for securely holding xml converted to string
 </summary>
</member>
<member name="P:System.Xml.XString.Content">
 <summary>
 Gets or sets the content.
 </summary>
 <value>
 The content.
 </value>
</member>
<member name="M:System.Xml.XString.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:System.Xml.XString"/> class.
 </summary>
 <param name="xmlstring">The xmlstring.</param>
</member>
<member name="T:System.Xml.XmlParseException">
 <summary>
 
 </summary>
 <seealso cref="T:System.Exception" />
</member>
<member name="M:System.Xml.XmlParseException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:System.Xml.XmlParseException"/> class.
 </summary>
 <param name="msg">The MSG.</param>
</member>
<member name="M:System.Xml.XmlParseException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:System.Xml.XmlParseException"/> class.
 </summary>
 <param name="msg">The MSG.</param>
 <param name="ex">The ex.</param>
</member>
</members>
</doc>
